@model System.Collections.Generic.List<Sciencecom.Models.Surface>

@for (int i = ViewBag.StartCountForSurface, j = 1; i < ViewBag.EndCountForSurface; i++, j++)
{
    <text>
        <div side="@ViewBag.Side" class="SideDiv">
            <input type="hidden" name="[@i].SideOfSurface" value="@ViewBag.Side">
            <h3 style="margin-left: 150px">Поверхность @j &nbsp; Стороны @ViewBag.Side </h3>

            <div class="form-inline">
                <hr/>
                <div class="form-group surfaceInputGroup">
                    <input name="[@j-1].NumberSurface" type="hidden" value="@ViewBag.Side">
                    <div class="form-group has-feedback">
                        <label for="[@j-1].Height">Высота</label>
                        @*@Html.ValidationMessageFor(model => model[i].Height)*@
                        <span class="field-validation-valid" data-valmsg-for="[@j-1].Height" data-valmsg-replace="true"></span>
                        <span class="glyphicon form-control-feedback"></span>
                        @{ var l = @Model;}
                        @Html.TextBoxFor(model => model[j-1].Height, new {@class = "form-control", type = "number", Name = "(" + ViewBag.Side + ")[" + (j-1) + "].Height", onchange = "CalculateArea(" + @ViewBag.Side + "," + (@j-1) + ")"})

                    </div>
                    <div class="form-group has-feedback" style="margin-left: 20px">
                        <label for="[@j-1].Width">Ширина</label>
                        @* @Html.ValidationMessageFor(model => model[i].Width)*@
                        <span class="field-validation-valid" data-valmsg-for="[@j-1].Width" data-valmsg-replace="true"></span>
                        <span class="glyphicon form-control-feedback"></span>
                        @Html.TextBoxFor(model => model[j-1].Width, new {@class = "form-control", type = "number", Name = "(" + ViewBag.Side + ")[" + (j-1) + "].Width", onchange = "CalculateArea(" + @ViewBag.Side + "," + (@j-1) + ")"})

                    </div>
                    <div class="form-group has-feedback" style="margin-left: 20px">
                        <label for="[@j-1].Space">Площадь</label>
                        @Html.TextBoxFor(model => model[j-1].Space, new {@class = "form-control", type = "number", SelectForSpace = "", onchange = "CalculationAS()", @readonly = "readonly", Name = "(" + ViewBag.Side + ")[" + (j-1) + "].Space"})
                        @Html.ValidationMessageFor(model => model[j-1].Space)
                    </div>

                    <div style="margin-left: 10px" class="form-group">

                        <label>Фотография</label>
                        <br/>
                        @{
                            string photoName = "[" + ViewBag.Side + "](" + j + ")";
                            List<string> listOfNames = new List<string>();
                            if ( Session["PhotoNames"] != null)
                            {
                                listOfNames = (List<string>)Session["PhotoNames"];
                            }
                        }
                        @if (listOfNames.Count != 0 && listOfNames.Any(x => x.Contains(photoName)))
                        {
                            string image = "/Images/photo1/[" + ViewBag.Side + "](" + @j + ")photo" + Session["IdShow"] + ".jpg";
                            string imgName = "[" + ViewBag.Side + "](" + @j + ")photo.jpg";
                            
                            <input type="hidden" name="PhotoInd[@{@ViewBag.Side}](@j)" value="setImage">
                            <img class="closeimg" style="width: 20px" src="../../Content/CloseImg.jpg"/>
                            <div class="fileUpload btn btn-warning input-sm">
                                <span>&nbsp;&nbsp;Фото&nbsp;</span>
                                <input type="file" class="upload" name="photo[@{@ViewBag.Side}](@j)" accept="image/jpeg/"/>
                            </div>
                            <label for="photo[@{@ViewBag.Side}](@j)">@imgName</label>
                            <br/>
                            <br/>
                            <button type="button" style="margin-left: 25px" class="modalPictureTrigger btn btn-default input-sm" data-toggle="modal" onclick="addPic('#ModalPictureDivPhoto', '@image')" data-target="#ViewModalPicturePhoto">Показать</button>
                        }
                        else
                        {
                            <input type="hidden" name="PhotoInd[@{@ViewBag.Side}](@j)" value="">
                            <img class="closeimg" style="width: 20px" src="../../Content/CloseImg.jpg"/>
                            <div class="fileUpload btn btn-default input-sm">
                                <span accept="image/jpeg/">&nbsp;&nbsp;Фото&nbsp;</span>
                                <input type="file" class="upload" name="photo[@{@ViewBag.Side}](@j)" accept="image/jpeg/"/>
                            </div>
                            <label for="photo[@{@ViewBag.Side}](@j)">Файл не выбран</label>
                            <br/>
                            <br/>
                        }

                    </div>
                </div>
            </div>
        </div>
    </text>
    <script type="text/javascript">
        AddRules();
        @*//выщитывание площади для каждой поверхности
        $('[name="(' + @ViewBag.Side + ')[' + @i + '].Height"]').on("change", function()
        {
            CalculateArea(@ViewBag.Side, @i);
        });
        $('[name="(' + @ViewBag.Side + ')[' + @i + '].Width"]').on("change", function()
        {
            CalculateArea(@ViewBag.Side, @i);
        });*@

        $(".closeimg").click(function () {
        $(this).prev().attr("value", "");
        $(this).next().find("input[type='file']")[0].value = null;
        $(this).next().next().text("Файл не выбран");
        $(this).next().removeClass("btn-warning");
        $(this).next().addClass("btn-default");
        $(this).parent().find("button.modalPictureTrigger").remove();
    });

    //выщитывание площади для каждой поверхности
    function CalculateArea(side, surface)
    {
        
        var Height = $('[name="(' + side + ')[' + surface + '].Height"]').val();
        var Width = $('[name="(' + side + ')[' + surface + '].Width"]').val();
        console.log(Height);
        console.log(Width);
        if (Height != "" && Width != "")
        {

            var Sum = Height * Width;
             console.log(Sum);
            $('[name="(' + side + ')[' + surface + '].Space"]').val(Sum);
            CalculationAS();
        }
    }


     //Функция срабатывает при клике на кнопку загрузки файла
    $("input[type='file']").click(function() {
        $(this).prev().attr("value", "");
       
        //очистка кнопки выбора файла
        var btnParent = $(this).parent();
    });

    //Функция срабатывает изменении значения кнопки загрузки файла
    $("input[type='file']").change(function()
    {
        var attr = $(this).attr("name");
        var modalImgId = "ModalPictureimgPhoto";
        var modalId = "#ModalPictureDivPhoto";
        var btnParent = $(this).parent();
        var fileName = this.value.split('\\').pop();
        if (fileName != "")
        {
            //console.log(btnParent.parent().find("label[for^='photo']"));
            btnParent.parent().find("label[for^='photo']").text(fileName);
            btnParent.parent().find("label[for^='Scan']").text(fileName);
            //Изменение стиля кнопки загрузки фала при выборе загружаемого файла

            var markup = '<img id="' + modalImgId + '" src=""' + ' height="300" style="display: block;margin-left: auto;margin-right: auto;">';
            //добавление в модальное окно пустого тега с картинкой

            $(modalId).empty();
            $(modalId).append(markup);
        }

        btnParent.addClass("btn-warning");
        btnParent.removeClass("btn-default");

        //считывание загружаемой кратинки и запись её в атрибут src тега img
        var fReader = new FileReader();
        fReader.readAsDataURL(this.files[0]);
        fReader.onloadend = function(event)
        {
           var imgid = "#" + modalImgId;
           $(imgid).attr("src", event.target.result);
        }

        //добавление кнопки открывания модального окна

        var modalButton = '<button type="button" style="margin-left:25px" class="modalPictureTrigger btn btn-default" data-toggle="modal" data-target="#ViewModalPicturePhoto">Показать</button>';
        
        if (btnParent.closest(".fileUpload").next().next().next().next().length != 0)
        {
            btnParent.closest(".fileUpload").next().next().next().next().remove();
        }
        btnParent.parent().append(modalButton);
     
    });

    </script>
}


