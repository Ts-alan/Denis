@using Newtonsoft.Json
@using Sciencecom.Models
@model  Sciencecom.Models.AdvertisingStructure
@{
    var i = 0;
    ViewBag.Title = "UnidentifiedStructure";
    ////Собственник конструкциии
    //var owners = new SciencecomEntities().Owners.ToList();

    //Вид
    var ListTypeAdvertising = new SciencecomEntities().TypeOfAdvertisingStructures.ToList();

    ////ListTypeAdvertising.Insert(0,null);

    //var ViewBids = new SciencecomEntities().ViewBids.OrderBy(a => a.OrderBy).ToList();


    ////Элемент улично-дорожной сети
    //var ListTypeElementOfTheRoadNetworkName = new SciencecomEntities().TheElementOfTheRoadNetworks.Select(a => new { id = a.id, Value = a.TheElementOfTheRoadNetworkName }).ToList();

    ////Статус
    //var Status = new SciencecomEntities().Status.OrderBy(x => x.OrderByStatus).Select(a => new { id = a.id, Value = a.NameStatus }).ToList();
    //Status.Insert(0, null);

    //Населенный пункт выпадающий список
    var Locality = new SciencecomEntities().Localities.ToList();

    ////Направление стороны
    //var DirectionSide = new SciencecomEntities().DirectionSides.OrderBy(x => x.OrderBY).ToList();
    ////Индификация поверхности
    //var IdentificationSide = new SciencecomEntities().Identifications.ToList();
    ////IdentificationSide.Insert(0, null);
    ////Идентификационный номер
    //var PropertyLocation = new SciencecomEntities().PropertyLocations.ToList();

    ////Подсветка
    //var Backlight = new SciencecomEntities().Backlights.ToList();

}
<script type="text/javascript">
    var i = 0;

    var havePlacemark = @Model.Breadth.HasValue.ToString().ToLower();

    var StartCountForSurface ;
    var EndCountForSurface = 0;
    var isGreateAdvertisingDesign = false;
    var ArrayOfSides = @Html.Raw(JsonConvert.SerializeObject(Model.Sides.Select(a => new { a.DirectionSide_id, length = a.Surfaces.Count, a.Identification_id }), Formatting.Indented, new JsonSerializerSettings
                  {
                      ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                  }));


    $(document).ready(function() {

        ////отключение валидации
        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }


        //выпадающий список на согласование
        $("[name=OnAgreement]").change(function() {
            var selectIndex = $("[name=OnAgreement] option:selected").val();

            if (selectIndex == "true") {
                $("#ContractHide").css("display", "block");
            }
            if (selectIndex == "false") {
                $("#ContractHide").css("display", "none");
            }

        });

        //выщитывание площади для каждой поверхности

        $('#SHeight').change(function () {
            //alert("!!!");
            CalculationOfTheArea(0);
        });
        $('#Width').change(function () {
            //alert("!!!");
            CalculationOfTheArea(0);
        });

        function CalculationOfTheArea(j) {

            var Height = $('[name="[' + j + '].Height"]').val();
            var Width = $('[name="[' + j + '].Width"]').val();

            if (Height != "" && Width != "") {

                var Sum = Height * Width;

                $('[name="[' + j + '].Space"]').val(Sum);
                CalculationAS();
            }
        }
    });

    // подсчет суммы площадей
    function CalculationAS() {

        var Summ=0;
        $("[selectforspace]").each(function(indx, element) {
            if ($(element).val() != "") {
                Summ += parseInt($(element).val());
            }
        });
        $("#ConstructionSquare").val(Summ);
    }


</script>
<h3> КАРТОЧКА НЕОПОЗНАННОЙ КОНСТРУКЦИИ</h3>

@Scripts.Render("~/Content/Map")
@using (Html.BeginForm("EditIllegalDesign", "Data", FormMethod.Post, new { enctype = "multipart/form-data", id = "test1" }))
{
    <input type="hidden" name="Code" value="@Model.Code">
    <h3> Общие данные о конструкции</h3>
    @Html.AntiForgeryToken()
    <div class="form-inline" style="margin-bottom: -10px">
        <hr />

        <input type="hidden" id="CountSize" id="SizeOfCount" name="CountSize" value="">
        @Html.ValidationSummary(true)
        @Html.ValidationMessage("Error")

        <div class="form-group">
            <label for="Locality">Вид</label>
            @Html.DropDownListFor(a => a.Code, new SelectList(ListTypeAdvertising, "Code", "Name"), new { @disabled = "disabled", @class = "form-control input-sm" })
            @Html.HiddenFor(a => a.Code)
            @Html.ValidationMessageFor(model => model.Code)
        </div>
        <br>
    </div>
    <h3>Данные о месте расположения конструкции</h3>
    <hr />
    <div class="row" style="margin-left: 0px">
        <div class="form-inline">

            <div class="form-group" style="display: none">
                <label for="UniqueNumber">Идентификационный номер</label>
                @Html.EditorFor(model => model.UniqueNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UniqueNumber)
            </div>
            <div class="form-group">
                <label for="Locality">Нас. пункт</label>
                @Html.DropDownListFor(a => a.Locality_id, new SelectList(Locality, "id", "NameLocality"), new { @class = "form-control input-sm" })
                @Html.ValidationMessageFor(model => model.Locality_id)
            </div>

            <div class="form-group">
                <label for="Street1">Улица</label>
                @Html.TextBoxFor(model => model.Street1, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Street1)
            </div>

            <div class="form-group">
                <label for="House1">Номер дома</label>
                @Html.TextBoxFor(model => model.House1, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.House1)
            </div>


        </div>
        <div class="form-inline" style="margin-top: 15px">
            <div class="form-group">
                <label for="Street2">Ближайшая улица по ходу движения</label>
                @Html.TextBoxFor(model => model.Street2, new { @class = "form-control" })

            </div>

            <div class="form-group">
                <label for="FromStreet">Со стороны улицы</label>
                @Html.TextBoxFor(model => model.FromStreet, new { @class = "form-control" })

            </div>
        </div>
    </div>
        <input type="button" id="MapSearchStreet" class="btn" value="Поиск на карте" style="margin-left: 185px; margin-top: 15px">

        <div class="form-inline">
            <hr />
            <div class="form-group" style="width: 600px; height: 500px" id="map"></div>

            <div class="form-group">
                <table>
                    <tr>
                        <td>
                            <label for="Breadth">Широта </label>
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.Breadth, new { @class = "form-control" })
                            @*<input class="text-box single-line ui-autocomplete-input" data-val="true" type="text" name="Breadth" id="Breadth">*@
                            <span data-valmsg-for="Breadth" data-valmsg-replace="true"></span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Height">Долгота</label>
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.Height, new { @class = "form-control" })
                            @*<input type="text" name="Height" data-val="true" id="Height">*@

                            @Html.ValidationMessageFor(model => model.Height)
                        </td>
                    </tr>
                </table>

            </div>
        </div>

        <h3>Фото</h3>
        <hr />

        <div class="form-inline">

            <div class="form-group">
                <label >Фотография 1</label>
                <br/>
                @if (ViewBag.photo1)
                {
                    string image = "/Images/photo1/" + ViewBag.Id + "photo1.jpg";
                    <p>
                        <a href=@image><img src=@image height="500"></a><br />
                    </p>
                    @*<div class="fileUpload btn btn-warning input-sm">
                        <span>Фото 1</span>
                        <input type="file" class="upload" name="photo1" accept="image/jpeg/"/>
                    </div>*@
                    <label for="photo1">Фото 1</label>
                    <br/>
                    <div class="modalTriggerContainer">
                        <button type="button" class="btn btn-info input-sm modalPictureTrigger" data-toggle="modal" data-id ="@ViewBag.Id" data-target="#ViewModalPicture">Открыть изображение</button>
                    </div>
                }
                else
                {
                    <input type="file" name="photo1" accept="image/jpeg" /><br />
                    <span data-valmsg-for="photo1" data-valmsg-replace="true"></span>
                     @*@Html.Raw("Не более 1 МБ")
                   <div class="fileUpload btn btn-default input-sm">
                        <span accept="image/jpeg/">Выберите файл</span>
                        <input type="file" class="upload" name="photo1" accept="image/jpeg/"/>
                    </div>
                    <label for="photo1">Файл не выбран</label>*@
                    <label class="fileSize">@Html.Raw("Не более 1 МБ")</label>
                    
                }

            </div>

            <div class="form-group">
                <label for="photo1">Фотография 2</label>
                <br/>
                @if (ViewBag.photo2)
                {
                    string image = "/Images/photo2/" + ViewBag.Id + "photo2.jpg";

                    <p>
                        <a href=@image><img src=@image height="500"></a><br />
                    </p>
                    @*<div class="fileUpload btn btn-warning input-sm">
                        <span>Фото 1</span>
                        <input type="file" class="upload" name="photo2" accept="image/jpeg/"/>
                    </div>
                    <label for="photo2">Файл не выбран</label>*@
                    <br/>
                    <div class="modalTriggerContainer">
                        <button type="button" class="btn btn-info input-sm modalPictureTrigger" data-toggle="modal" data-id ="@ViewBag.Id" data-target="#ViewModalPicture">Открыть изображение</button>
                    </div>
                }
                else
                {
                    <input type="file" name="photo2" accept="image/jpeg" /><br />
                    <span data-valmsg-for="photo2" data-valmsg-replace="true"></span>
                    @*<div class="fileUpload btn btn-default input-sm">
                        <span accept="image/jpeg/">Выберите файл</span>
                        <input type="file" class="upload" name="photo2" accept="image/jpeg/"/>
                    </div>
                    <label for="photo2">Файл не выбран</label>*@
                 
                    <label class="fileSize">@Html.Raw("Не более 1 МБ")</label>
                    
                }

            </div>
        </div>

        <h3> Комментарий</h3>
        <hr />
        <div class="form-group">
            @Html.TextAreaFor(model => model.ContentInformationDescription, new { cols = "90", rows = "4", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ContentInformationDescription)
        </div>

        <div id="InsertSide" style="display: none">
            <div code="" class="form-horizontal">
                <div class="form-group">
                    <select class="text-box single-line" id="AddButton1" onchange="AddSurface(1)" name="CountSurfuce1" identificationforcountside="" type="text" data-val="true" data-val-required="Укажите кол-во сторон">
                        <option selected="selected">0</option>
                    </select>
                    <select class="valid" identificationfordirectionside="IdentificationForDirectionSide" id="DirectionSide" name="[0].IdentificationForDirectionSide">

                        <option value="27b8c509-8f09-4a0d-ae22-048c2611b7ea" selected="selected">По ходу движения (сторона А)</option>
                    </select>

                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Сохранить" class="btn btn-default" />
                @Html.ActionLink("Выйти без сохранения", "AdvertisingDesign", null, new { @class = "btn btn-default" })
            </div>
        </div>
}
<div id="ModalPicturePartial">
    @Html.Partial("PatialView/ModalPicture")
</div>