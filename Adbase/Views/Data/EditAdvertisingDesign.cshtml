@using System.Data.Entity
@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.EntityFramework
@using Newtonsoft.Json
@using Sciencecom.Models
@using ModelBinderDictionary = System.Web.ModelBinding.ModelBinderDictionary
@model  Sciencecom.Models.AdvertisingStructure
@{
    var i = 0;
    ViewBag.Title = "EditAdvertisingStructure";
    //Собственник конструкциии
    var owners = new SciencecomEntities().Owners.ToList();

    //Вид
    var ListTypeAdvertising = new SciencecomEntities().TypeOfAdvertisingStructures.ToList();

    //ListTypeAdvertising.Insert(0,null);
    
    //Сторона
    //var Sides = new SciencecomEntities().Sides.Where(a).ToList();

    //Элемент улично-дорожной сети
    var ListTypeElementOfTheRoadNetworkName = new SciencecomEntities().TheElementOfTheRoadNetworks.Select(a => new { id = a.id, Value = a.TheElementOfTheRoadNetworkName }).ToList();

    //Статус
    var Status = new SciencecomEntities().Status.OrderBy(x => x.OrderByStatus).Select(a => new { id = a.id, Value = a.NameStatus }).ToList();
    Status.Insert(0, null);

    //Населенный пункт выпадающий список
    var Locality = new SciencecomEntities().Localities.ToList();

    //Направление стороны
    var DirectionSide = new SciencecomEntities().DirectionSides.OrderBy(x => x.OrderBY).ToList();
    //Индификация поверхности
    var IdentificationSide = new SciencecomEntities().Identifications.ToList();
    //IdentificationSide.Insert(0, null);
    //Идентификационный номер
    var PropertyLocation = new SciencecomEntities().PropertyLocations.ToList();

}
@Scripts.Render("~/Content/Map")
<script type="text/javascript">
    var i = 0;

    $(document).ready(function () {
        //нормально работает ширина высота,убираем ненавязчивую валидацию 
        $('[data-val-number="Значением поля Breadth должно быть число."]').rules('add', {
            number: false
        });
        $('[data-val-number="Значением поля Height должно быть число."]').rules('add', {
            number: false
        });

        //выпадающий список на согласование
        $("[name=OnAgreement]").change(function () {
            var selectIndex = $("[name=OnAgreement] option:selected").val();
            
            if (selectIndex == "true") {
                $("#ContractHide").css("display", "block");
            }
            if (selectIndex == "false") {
                $("#ContractHide").css("display", "none");
            }

        });

        function InsertOn() {
            $(".each1 input").eq(0).on('change', function () {
                var temp1 = $(this).val();
                //вычисление площади
                var temp2 = $(".each2 input").val();
                $(".each3 input").val(temp1 * (temp2 === "" ? 0 : temp2));

                $(".each1 input").each(function () {
                    $(this).val(temp1);
                });
            });
            $(".each2 input").eq(0).on('change', function () {
                var temp1 = $(this).val();
                //вычисление площади
                var temp2 = $(".each1 input").va();
                $(".each3 input").val(temp1 * (temp2 === "" ? 0 : temp2));

                $(".each2 input").each(function () {
                    $(this).val(temp1);
                });
            });
            $(".each3 input").eq(0).on('change', function () {
                var temp1 = $(this).val();
                $(".each3 input").each(function () {
                    $(this).val(temp1);
                });
            });
        }


        //дублирование для остальных поверхностей при добавлении
        function duplicationSurfaces() {
            $(".each1 input").trigger('change');
            $(".each2 input").trigger('change');
            $(".each3 input").trigger('change');
        }

    });

    function SetCountSize() {
        var CountSizes = $('#CountSizes').val();
        $("#CountSize").val(CountSizes);
        if (CountSizes != "") {
            $("[code]").each(function (indx, element) {
                element.remove();
            });
            for (var i = 1; i <= CountSizes; i++) {

                $("#InsertSide").before("<div class=\"form-horizontal\" >" +
                    "<div class=\"form-group\" >" +
                    "<label class=\"control-label col-md-2\" for=\"\" style=\"margin-left: 55px\">Сторона  " + i + " </label>" +
                    "</div>" +
                    "<div class=\"form-group\">" +
                    "<div class=\"col-md-10\">" +
                    " <select class=\"text-box single-line\" id=\"AddButton" + i + "\" onchange=AddSurface(" + i + ") name=\"CountSurfuce\" type=\"text\" data-val=\"true\" data-val-required=\"Укажите кол-во сторон\">" +
                    "<option></option>" +
                    "<option>1</option>" +
                    "<option>2</option>" +
                    "<option>3</option>" +
                    "<option>4</option>" +
                    "<option>5</option>" +
                    "<option>6</option>" +
                    "<option>7</option>" +
                    "<option>8</option>" +
                    "</select>" +
                    "</div>" +
                    "</div>" +
                    "<div  id=\"InsertPartial" + i + "\"></div>" +
                    "</div>");
            }
        }
        //
      
    }
    //Добавить поверхность
    function AddSurface(i) {
        var count = $("#AddButton" + i + "").val();

        $("[side=" + i + "]").remove();
        for (var j = 1; j <= count; j++) {
            $.ajax('@Url.Action("Surface", "Data")', { async: false, data: { side: i, id: Increment(), numberSurface: j } })
            .success(function (e) {
                $("#InsertPartial" + i + "").before(e);
            });
        }
    }

    function Increment() {
        return i++;
    }

</script>
<h3> ДОБАВИТЬ РЕКЛАМНУЮ КОНСТРУКЦИЮ</h3>


@using (Html.BeginForm("CreateAdvertisingDesign", "Data", FormMethod.Post, new { enctype = "multipart/form-data", id = "test1" }))
{
    <input type="hidden" name="Code" value="@ViewBag.Code">
    <h3> 1. Общие данные о рекламной конструкции</h3>
    @Html.AntiForgeryToken()
    <div class="form-inline" style="margin-bottom: -10px">
        <hr />

        <input type="hidden" id="CountSize" id="SizeOfCount" name="CountSize" value="">
        @Html.ValidationSummary(true)
        @Html.ValidationMessage("Error")

        <div class="form-group">
            <label for="Owner">Собственник </label>
            @Html.DropDownListFor(a => a.Owner.Name, new SelectList(owners, "id", "Name"))
            @Html.ValidationMessageFor(model => model.Owner_Id)
        </div>

        <div class="form-group">
            <label for="Locality">Вид</label>
            @Html.DropDownListFor(a=>a.TypeOfAdvertisingStructure.Name, new SelectList(ListTypeAdvertising, "id", "Name"))
        </div>

        <div class="form-group">
            <label for="Status">Статус</label>
            @Html.DropDownListFor(a => a.Status_Id, new SelectList(Status, "id", "Value", Status.ElementAt(4).id))
            @Html.ValidationMessageFor(model => model.Status_Id)
        </div>

        <div class="form-group">
            <label for="UniqueNumber">Идентификационный номер</label>
            <input class="text-box single-line" name="UniqueNumber" type="text" value="@ViewBag.UniqueNumber">
            @Html.ValidationMessageFor(model => model.UniqueNumber)
        </div>
        <br>

    </div>
    <div class="form-horizontal">
        <div class="form-group">
            <label for="Owner">конструкции </label>
        </div>
    </div>
    <div class="form-inline">
        <div class="form-group">
            <label for="PropertyLocation_id">Собственность места расположения </label>
            @Html.DropDownListFor(a => a.PropertyLocation.NamePropertyLocation, new SelectList(PropertyLocation, "id", "NamePropertyLocation"))
            @Html.ValidationMessageFor(model => model.PropertyLocation_id)
        </div>

        <div class="form-group">
            <label for="Owner">Собственник места размещения</label>
            @Html.EditorFor(model => model.OwnerPlacements)
        </div>

    </div>
    <h3> 2.Данные о месте расположения рекламной конструкции</h3>

    <div class="form-inline">
        <hr />
        <div class="form-group" style="margin-left: -15px">
            <label for="Locality">Нас. пункт</label>
            @Html.DropDownListFor(a => a.Locality_id, new SelectList(Locality, "id", "NameLocality"))
            @Html.ValidationMessageFor(model => model.Locality)
        </div>


        <div class="form-group" style="margin-left: 200px">
            <label for="TheElementOfTheRoadNetwork">Элемент улично-дорожной сети</label>
            @Html.DropDownListFor(a => a.TheElementOfTheRoadNetwork_id, new SelectList(ListTypeElementOfTheRoadNetworkName, "id", "Value"), "")
            @Html.ValidationMessageFor(a => a.TheElementOfTheRoadNetwork_id)
        </div>
    </div>

    <div class="form-inline">
        <hr />
        <div class="form-group">
            <label for="Street1">Улица 1</label>
            @Html.EditorFor(model => model.Street1)
            @Html.ValidationMessageFor(model => model.Street1)
        </div>

        <div class="form-group">
            <label for="House1">Дом</label>
            @Html.EditorFor(model => model.House1)
            @Html.ValidationMessageFor(model => model.House1)
        </div>

        <div class="form-group">
            <label for="Street2">Улица 2</label>
            @Html.EditorFor(model => model.Street2)
            @Html.ValidationMessageFor(model => model.Street2)
        </div>

        <div class="form-group">
            <label for="FromStreet">Со стороны улицы 3</label>
            @Html.EditorFor(model => model.FromStreet)
            @Html.ValidationMessageFor(model => model.FromStreet)
        </div>
    </div>
    <input type="button" id="MapSearch" value="Поиск на карте">
    <div class="form-inline">
        <hr />
        <div class="form-group" style="width: 600px; height: 500px" id="map"></div>

        <div class="form-group">

            <div>
                <label for="Breadth">Широта </label>
                @Html.EditorFor(a => a.Breadth)
                @Html.ValidationMessageFor(model => model.Breadth)

            </div>

            <div>
                <label for="Height">Долгота</label>
                @Html.EditorFor(a => a.Height)
                @Html.ValidationMessageFor(model => model.Height)

            </div>
        </div>
    </div>

    <h3> 3.Разрешительная документация</h3>

    <div class="form-horizontal">
        <hr />

        <div class="form-group">
            <label for="C_ContractFinancialManagement">№ договора с финансовым управлением</label>
            @Html.EditorFor(model => model.C_ContractFinancialManagement)
            @Html.ValidationMessageFor(model => model.C_ContractFinancialManagement)
        </div>

        <div class="form-group">
            <label for="C_PassportAdvertising">№ паспорта рекламы</label>
            @Html.EditorFor(model => model.C_PassportAdvertising)
            @Html.ValidationMessageFor(model => model.C_PassportAdvertising)

            <label for="StartDate">разреш с</label>
            @Html.EditorFor(model => model.StartDate)
            @Html.ValidationMessageFor(model => model.StartDate)

            <label for="EndDate">разреш по</label>
            @Html.EditorFor(model => model.EndDate)
            @Html.ValidationMessageFor(model => model.EndDate)
        </div>

        <div class="form-group">
            <label for="PlannedInstallationDate">Планируемая дата установки</label>
            @Html.EditorFor(model => model.PlannedInstallationDate)
            @Html.ValidationMessageFor(model => model.PlannedInstallationDate)
        </div>

    </div>

    <div class="form-inline">

        <div class="form-group">
            <label for="ScanPassport_1Sides">Скан паспорта (стор 1)</label>
            <input type="file" name="ScanPassport_1Sides" accept="image/jpeg" data-val="true" data-val-required="Выберите файл для загрузки" /><br />
            <span class="field-validation-valid" data-valmsg-for="ScanPassport_1Sides" data-valmsg-replace="true"></span>
            @Html.Raw("Не более 1 МБ")
        </div>

        <div class="form-group">
            <label for="ScanPassport_2Sides">Скан паспорта (стор 2)</label>
            <input type="file" name="ScanPassport_2Sides" accept="image/jpeg" data-val="true" data-val-required="Выберите файл для загрузки" /><br />
            <span class="field-validation-valid" data-valmsg-for="ScanPassport_2Sides" data-valmsg-replace="true"></span>
            @Html.Raw("Не более 1 МБ")
        </div>

    </div>

    <div class="form-inline">

        <div class="form-group">
            <label for="DateOfReceiptOfTheApplication">Дата получения заявки</label>
            @Html.EditorFor(model => model.DateOfReceiptOfTheApplication)
            @Html.ValidationMessageFor(model => model.DateOfReceiptOfTheApplication)
        </div>

        <div class="form-group">
            <label for="DateOfTakenPassport">Дата выдачи паспорта</label>
            @Html.EditorFor(model => model.DateOfTakenPassport)
            @Html.ValidationMessageFor(model => model.DateOfTakenPassport)
        </div>

    </div>

    <h3> 4.Описание рекламной конструкции</h3>

    <div class="form-inline">
        <hr />

        <div class="form-group">
            <label for="DateOfActualInstallation">Дата фактической установки</label>
            @Html.EditorFor(model => model.DateOfActualInstallation)
            @Html.ValidationMessageFor(model => model.DateOfActualInstallation)
        </div>

        <div class="form-group">
            <label for="DateDismantling">Дата демонтажа</label>
            @Html.EditorFor(model => model.DateDismantling)
            @Html.ValidationMessageFor(model => model.DateDismantling)
        </div>

    </div>

    <div class="form-inline">

        <div class="form-group">
            <label for="CommentOwner">Подсветка</label>
            @Html.DropDownListFor(a => a.Backlight, new SelectList(new[] { "", "Есть", "Нет" }))
            @Html.ValidationMessageFor(model => model.Backlight)
        </div>

        <div class="form-group">
            <label for="CommentOwner">Комментарий</label>
            @Html.EditorFor(model => model.CommentOwner)
        </div>

    </div>
    <div class="form-horizontal" style="margin-top: 18px">
        <div class="form-group">
            <label for="CountSizes">Количество сторон</label>
            @*<select class="text-box single-line" id="CountSizes" onchange="SetCountSize()" name="CountSizes" type="text" data-val="true" data-val-required="Введите значение">
                <option></option>
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
                <option>6</option>
                <option>7</option>
                <option>8</option>
            </select>*@
            @Html.DropDownListFor(a => a.Sides, new SelectList(new[] { "", "1", "2", "3", "4", "5", "6", "7", "8" }),Model.Sides.Count.ToString())
            <span class="field-validation-validr" data-valmsg-for="CountSizes" data-valmsg-replace="true">
            </span>
        </div>
    </div>
    <div id="InsertSide"></div>
    <h3>5.Данные контроля</h3>

    <div class="form-inline">

        <div class="form-group">
            <label for="RevisionDate">Дата проверки</label>
            @Html.EditorFor(model => model.RevisionDate)
            @Html.ValidationMessageFor(model => model.RevisionDate)
        </div>

        <div class="form-group">
            <label for="DateDismantling">Комментарий контроллера</label>
            @Html.EditorFor(model => model.Note_controller)
            @Html.ValidationMessageFor(model => model.Note_controller)
        </div>

    </div>

    <div id="InsertPhoto"></div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Изменить" class="btn btn-default" />
        </div>
    </div>




}

