@using System.Data.Entity
@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.EntityFramework
@using Newtonsoft.Json
@using Sciencecom.Models
@using ModelBinderDictionary = System.Web.ModelBinding.ModelBinderDictionary
@model  AdvertisingStructure
@{
    var i = 0;
    ViewBag.Title = "EditAdvertisingStructure";
    //Собственник конструкциии
    var owners = new SciencecomEntities().Owners.ToList();
   
    //Вид
    var ListTypeAdvertising = new SciencecomEntities().TypeOfAdvertisingStructures.ToList();
 
    //ListTypeAdvertising.Insert(0,null);

    var ViewBids = new SciencecomEntities().ViewBids.OrderBy(a=>a.OrderBy).ToList();
   
   
    //Элемент улично-дорожной сети
    var ListTypeElementOfTheRoadNetworkName = new SciencecomEntities().TheElementOfTheRoadNetworks.Select(a => new { id = a.id, Value = a.TheElementOfTheRoadNetworkName }).ToList();
    
    //Статус
    var Status = new SciencecomEntities().Status.OrderBy(x=>x.OrderByStatus).Select(a => new { id = a.id, Value = a.NameStatus }).ToList();  
    Status.Insert(0,null); 
    
    //Населенный пункт выпадающий список
    var Locality = new SciencecomEntities().Localities.ToList();

    //Направление стороны
    var DirectionSide = new SciencecomEntities().DirectionSides.OrderBy(x=>x.OrderBY).ToList();
    //Индификация поверхности
    var IdentificationSide = new SciencecomEntities().Identifications.ToList();
    //IdentificationSide.Insert(0, null);
    //Идентификационный номер
    var PropertyLocation = new SciencecomEntities().PropertyLocations.ToList();

}
@Scripts.Render("~/Content/Map")
<script type="text/javascript">
    var i = 0; 
    
    var StartCountForSurface ;
    var EndCountForSurface = 0;
    var isGreateAdvertisingDesign = false;
    var ArrayOfSides = @Html.Raw(JsonConvert.SerializeObject(Model.Sides.Select(a=>new {a.DirectionSide_id,length= a.Surfaces.Count,a.Identification_id}), Formatting.Indented, new JsonSerializerSettings
    {
       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
    }));




    $(document).ready(function() {

        ////отключение валидации
        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
        //накручивание данных в поля
        window.onload = SetCountSize();
        $("[identificationfordirectionside]").each(function(indx, element) {
           $(element)[0].value =ArrayOfSides[indx].DirectionSide_id;

        });
        $("[identificationforcountside]").each(function(indx, element) {
            $(element)[0].value = ArrayOfSides[indx].length;
            
            AddSurface(indx+1);
        });

        //выпадающий список на согласование
        $("[name=OnAgreement]").change(function() {
            var selectIndex = $("[name=OnAgreement] option:selected").val();
            
            if (selectIndex == "true") {
                $("#ContractHide").css("display", "block");
            }
            if (selectIndex == "false") {
                $("#ContractHide").css("display", "none");
            }

        });

    });

    // подсчет суммы площадей
    function CalculationAS() {
     
        var Summ=0;
        $("[selectforspace]").each(function(indx, element) {
            if ($(element).val() != "") {
                Summ += parseInt($(element).val());
            }
        });
        $("#ConstructionSquare").val(Summ);
    }

    //кол-во сторон
    function SetCountSize() {
        EndCountForSurface = 0;
        var CountSizes = $('#CountSizes').val();
        $("#CountSize").val(CountSizes);
        if (CountSizes != "") {
            $("[code]").each(function (indx, element) {
                element.remove();
            });

            for (var i = 1; i <= CountSizes; i++) {

                $("#InsertSide").before("<div code class=\"form-horizontal\" >" +
                    "<div class=\"form-group\" >" +
                    "<h3 class=\"control-label col-md-2\" for=\"\" style=\"margin-left: 55px\">Сторона  " + i + " </h3>" +
                    "</div>" +
                    "<div class=\"form-group\">" +
                    "<div class=\"col-md-10\">" +
                    "<b>Количество поверхностей</b>" +
                    " <select class=\"text-box single-line\" id=\"AddButton" + i + "\" onchange=EditSurface(" + i + ") name=\"CountSurfuce" + i + "\" IdentificationForCountSide=\"\" type=\"text\" data-val=\"true\" data-val-required=\"Укажите кол-во сторон\">" +
                    "<option></option>" +
                    "<option>1</option>" +
                    "<option>2</option>" +
                    "<option>3</option>" +
                    "<option>4</option>" +
                    "<option>5</option>" +
                    "<option>6</option>" +
                    "<option>7</option>" +
                    "<option>8</option>" +
                    "</select> &nbsp;&nbsp;&nbsp; <b>Направление стороны</b>" + '@Ajax.JavaScriptStringEncode(Html.DropDownList("DirectionSide", new SelectList(DirectionSide, "id", "NameOfDirectionSide"), "", new { data_val_required = "Выберете", data_val = "true", IdentificationForDirectionSide = "" }).ToHtmlString().Replace("\"", " "))' +
                    "</div>" + 
                    "</div> <div style=\"margin-left: -15px;display: none\" id=\"" + i + "HiddenIdentification\"> &nbsp;&nbsp;&nbsp;<b>Идентификация поверхностей</b>" + '@Ajax.JavaScriptStringEncode(Html.DropDownList("IdentificationSurface", new SelectList(IdentificationSide, "id", "IdentificationName"),"",new { data_val_required = "Выберете", data_val = "true", IdentificationForIdentificationSurface = "" }).ToHtmlString().Replace("\"", " ")) </div>' +
                    "<div  id=\"InsertPartial" + i + "\"></div>" +
                    "</div>");
                
                $("#SizeOfCount").val(CountSizes);

            }
        }
        //Навешивание валидации
        $('[name="DirectionSide"]').each(function(indx, element) {
            $(element).attr("name", "[" + indx + "].IdentificationForDirectionSide");
        });
        $('[action="/Data/CreateAdvertisingDesign"]').validate({
            rules: {
                '[0].IdentificationForDirectionSide': "required",
                '[1].IdentificationForDirectionSide': "required",
                '[2].IdentificationForDirectionSide': "required",
                '[3].IdentificationForDirectionSide': "required",
                '[4].IdentificationForDirectionSide': "required",
                '[5].IdentificationForDirectionSide': "required",
                '[6].IdentificationForDirectionSide': "required",
                '[7].IdentificationForDirectionSide': "required",
                '[8].IdentificationForDirectionSide': "required"
            }
            //messages: {
            //    '[0].IdentificationForDirectionSide': "test",
            //    '[1].IdentificationForDirectionSide': "brak uzytkownika"
            //    }
   
        }
        );
        $('[IdentificationForDirectionSide]').each(function (indx, element) {
                
            $(element).rules('add', {
                required: true
            });
        }
        );

        $('[action="/Data/CreateAdvertisingDesign"]').validate({
            rules: {
                'CountSurfuce1': "required",
                'CountSurfuce2': "required",
                'CountSurfuce3': "required",
                'CountSurfuce4': "required",
                'CountSurfuce5': "required",
                'CountSurfuce6': "required",
                'CountSurfuce7': "required",
                'CountSurfuce8': "required"
            
            }
            //messages: {
            //    '[0].DirectionSide': "test",
            //    '[1].DirectionSide': "brak uzytkownika"
            //}

        }
        );
        $('[IdentificationForCountSide]').each(function (indx, element) {
           
            $(element).rules('add', {
                required: true
            });
        }
        );
        //другое решение не тестил
        $('[name="DirectionSide"]').data('validator', null);
        $.validator.unobtrusive.parse('[name="DirectionSide"]');
     
    }

    function SetValidate(i) {

        var count = $("#AddButton" + i + "").val();
        StartCountForSurface = EndCountForSurface;
        EndCountForSurface = parseInt(count) + parseInt(EndCountForSurface);

        if (count == 1) {
            $("#" + i + "HiddenIdentification").hide();
        } else {
            $("#" + i + "HiddenIdentification").show();
            //валидация
            $('[name="IdentificationSurface"]').each(function (indx, element) {
                $(element)[0].value =ArrayOfSides[indx].Identification_id;
                $(element).attr("name", "[" + indx + "].IdentificationForIdentificationSurface");
            });
            $('[action="/Data/CreateAdvertisingDesign"]').validate({
                rules: {
                    '[0].IdentificationForIdentificationSurface': "required",
                    '[1].IdentificationForIdentificationSurface': "required",
                    '[2].IdentificationForIdentificationSurface': "required",
                    '[3].IdentificationForIdentificationSurface': "required",
                    '[4].IdentificationForIdentificationSurface': "required",
                    '[5].IdentificationForIdentificationSurface': "required",
                    '[6].IdentificationForIdentificationSurface': "required",
                    '[7].IdentificationForIdentificationSurface': "required",
                    '[8].IdentificationForIdentificationSurface': "required"
 
                }

            });
            $('[IdentificationForIdentificationSurface]').each(function (indx, element) {

                $(element).rules('add', {
                    required: true
                });
            });

        }
        $("[side=" + i + "]").remove();
    }

    //Добавить поверхность+           
    function AddSurface(i) {
        SetValidate(i);
        
        $.ajax('@Url.Action("EditSurface", "Data")', { async: true, data: { side: i, StartCountForSurface: StartCountForSurface, EndCountForSurface: EndCountForSurface } })
            .success(function(e) {
                console.log(e);
                $("#InsertPartial" + i + "").before(e);
                CalculationAS();
                ////отключение валидации
                $.validator.methods.number = function (value, element) {
                    return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
                }
            }).error(function(e) {
                alert("ошибка кукареку");
            });  
    }
    //Редактировать поверхность+           
    function EditSurface(i) {
        SetValidate(i);
        
        $.ajax('@Url.Action("AddSurface", "Data")', { async: true, data: { side: i, StartCountForSurface: StartCountForSurface, EndCountForSurface: EndCountForSurface } })
            .success(function(e) {
                console.log(e);
                $("#InsertPartial" + i + "").before(e);
                CalculationAS();
                ////отключение валидации
                $.validator.methods.number = function (value, element) {
                    return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
                }
            }).error(function(e) {
                alert("ошибка кукареку");
            });  
    }


    //выщитывание площади для каждой поверхности
    function CalculationOfTheArea(j) {
  
        var Height = $('[name="[' + j + '].Height"]').val();
        var Width = $('[name="[' + j + '].Width"]').val();

        if (Height != "" && Width != "") {

            var Sum = Height * Width;

            $('[name="[' + j + '].Space"]').val(Sum);
            CalculationAS();
        }
       
    }
    

</script>
<h3> ИЗМЕНИТЬ РЕКЛАМНУЮ КОНСТРУКЦИЮ</h3>


@using (Html.BeginForm("EditAdvertisingDesign", "Data", FormMethod.Post, new { enctype = "multipart/form-data", id = "test1" }))
{

    <h3> 1. Общие данные о рекламной конструкции</h3>
    @Html.AntiForgeryToken()
    <div class="form-inline" style="margin-bottom: -10px">
        <hr />

        <input type="hidden" id="CountSize" id="SizeOfCount" name="CountSize" value="">
        @Html.ValidationSummary(true)
        @Html.ValidationMessage("Error")

        <div class="form-group">
            <label for="Owner">Собственник </label>
            @Html.DropDownListFor(a => a.Owner_Id, new SelectList(owners, "id", "Name"), "")
            @Html.ValidationMessageFor(model => model.Owner_Id)
        </div>

        <div class="form-group">
            <label for="Locality">Вид</label>
            @Html.DropDownListFor(a => a.Code, new SelectList(ListTypeAdvertising, "Code", "Name"))
            @Html.ValidationMessageFor(model => model.Code)
        </div>

        <div class="form-group">
            <label for="Status">Статус</label>
            @Html.DropDownListFor(a => a.Status_Id, new SelectList(Status, "id", "Value"))
            @Html.ValidationMessageFor(model => model.Status_Id)
        </div>

        <div class="form-group">
            <label for="UniqueNumber">Идентификационный номер</label>
            @Html.EditorFor(model=>model.UniqueNumber,new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.UniqueNumber)
        </div>
        <br>

    </div>
    <div class="form-horizontal">
        <div class="form-group">
            <label for="Owner">конструкции </label>
        </div>
    </div>
    <div class="form-inline">
        <div class="form-group">
            <label for="PropertyLocation_id">Форма собственности места размещения </label>
            @Html.DropDownListFor(a => a.PropertyLocation_id, new SelectList(PropertyLocation, "id", "NamePropertyLocation"), "")
            @Html.ValidationMessageFor(model => model.PropertyLocation_id)
        </div>

        <div class="form-group">
            <label for="Owner">Собственник места размещения</label>
            @Html.EditorFor(model => model.OwnerPlacements)
            @Html.ValidationMessageFor(model => model.OwnerPlacements)
        </div>

    </div>
    <h3> 2.Данные о месте расположения рекламной конструкции</h3>

    <div class="form-inline">
        <hr />
        <div class="form-group" style="margin-left: -15px">
            <label for="Locality">Нас. пункт</label>
            @Html.DropDownListFor(a => a.Locality_id, new SelectList(Locality, "id", "NameLocality"))
            @Html.ValidationMessageFor(model => model.Locality_id)
        </div>


        <div class="form-group" style="margin-left: 200px">
            <label for="TheElementOfTheRoadNetwork">Элемент улично-дорожной сети</label>
            @Html.DropDownListFor(a => a.TheElementOfTheRoadNetwork_id, new SelectList(ListTypeElementOfTheRoadNetworkName, "id", "Value"),"")
            @Html.ValidationMessageFor(a => a.TheElementOfTheRoadNetwork_id)
        </div>
    </div>

    <div class="form-inline">
        <hr />
        <div class="form-group">
            <label for="Street1">Улица</label>
            @Html.EditorFor(model => model.Street1)
            @Html.ValidationMessageFor(model => model.Street1)
        </div>

        <div class="form-group">
            <label for="House1">Дом</label>
            @Html.EditorFor(model => model.House1)
            @Html.ValidationMessageFor(model => model.House1)
        </div>


    </div>
    <input type="button" id="MapSearch" value="Поиск на карте">
    <div class="form-inline">
        <div class="form-group">
            <label for="Street2">Ближайшая улица по ходу движения</label>
            @Html.EditorFor(model => model.Street2)
            @Html.ValidationMessageFor(model => model.Street2)
        </div>

        <div class="form-group">
            <label for="FromStreet">Со стороны улицы</label>
            @Html.EditorFor(model => model.FromStreet)
            @Html.ValidationMessageFor(model => model.FromStreet)
        </div>
    </div>
    <div class="form-inline">
        <hr />
        <div class="form-group" style="width: 600px; height: 500px" id="map"></div>

        <div class="form-group">

            <div>
                <label for="Breadth">Широта </label>

                @Html.EditorFor(model=>model.Breadth)
                @Html.ValidationMessageFor(model => model.Breadth)
            </div>

            <div>
                <label for="Height">Долгота</label>
                @Html.EditorFor(model => model.Height)


            </div>
        </div>
    </div>

    <h3> 3.Разрешительная документация</h3>
    <div class="form-horizontal">
        <hr />
        <div class="form-group">

            <label for="ViewBad_Id">Вид заявки</label>
            @Html.DropDownListFor(model => model.ViewBad_Id, new SelectList(ViewBids, "id", "Name"))
            @Html.ValidationMessageFor(model => model.ViewBad_Id)


            <label for="DateOfReceiptOfTheApplication">Дата подачи заявки</label>
            @Html.EditorFor(model => model.DateOfReceiptOfTheApplication)
            @Html.ValidationMessageFor(model => model.DateOfReceiptOfTheApplication)

        </div>
        <div class="form-group" style="margin-bottom: 5px">

            <label for="C_PassportAdvertising">№ паспорта рекламы</label>
            @Html.EditorFor(model => model.C_PassportAdvertising)
            @Html.ValidationMessageFor(model => model.C_PassportAdvertising)


            <label for="DateOfTakenPassport">Дата выдачи паспорта</label>
            @Html.EditorFor(model => model.DateOfTakenPassport)
            @Html.ValidationMessageFor(model => model.DateOfTakenPassport)

        </div>

        <div class="form-group" style="margin-bottom: 5px">
            <label for="StartDate">разреш с</label>
            @Html.EditorFor(model => model.StartDate)
            @Html.ValidationMessageFor(model => model.StartDate)

            <label for="EndDate">разреш по</label>
            @Html.EditorFor(model => model.EndDate)
            @Html.ValidationMessageFor(model => model.EndDate)
        </div>

    </div>

    <div class="form-inline">

        <div class="form-group">
            <label for="ScanPassport_1Sides">Скан паспорта (стор 1)</label>
            <input type="file" name="ScanPassport_1Sides"  accept="image/jpeg" /><br />

            @Html.Raw("Не более 1 МБ")
        </div>

        <div class="form-group">
            <label for="ScanPassport_2Sides">Скан паспорта (стор 2)</label>
            <input type="file" name="ScanPassport_2Sides"  accept="image/jpeg" /><br />

            @Html.Raw("Не более 1 МБ")
        </div>

    </div>

    <div class="form-horizontal">

        <div class="form-group" style="margin-bottom: 5px">
            <label for="C_ContractFinancialManagement">№ договора с финансовым управлением</label>
            @Html.EditorFor(model => model.C_ContractFinancialManagement)
            @Html.ValidationMessageFor(model => model.C_ContractFinancialManagement)

            <label for="TheDateOfTheContract">Дата договора</label>
            @Html.EditorFor(model => model.TheDateOfTheContract)
            @Html.ValidationMessageFor(model => model.TheDateOfTheContract)

        </div>

        <div class="form-group">

            <label for="Scan1SidesWithFinancialManagement">Скан 1 страницы договора с финанаосвым управлением</label>
            <input type="file" name="Scan1SidesWithFinancialManagement" accept="image/jpeg"  /><br />
  
            @Html.Raw("Не более 1 МБ")

        </div>
    </div>

    <h3> 4.Описание рекламной конструкции</h3>

    <div class="form-inline">
        <hr />
        <div class="form-group">
            <label for="PlannedInstallationDate">Планируемая дата установки</label>
            @Html.EditorFor(model => model.PlannedInstallationDate)
            @Html.ValidationMessageFor(model => model.PlannedInstallationDate)
        </div>

        <div class="form-group">
            <label for="DateOfActualInstallation">Дата фактической установки</label>
            @Html.EditorFor(model => model.DateOfActualInstallation)
            @Html.ValidationMessageFor(model => model.DateOfActualInstallation)
        </div>



    </div>
    <div class="form-horizontal">
        <div class="form-group">
            <label for="DateDismantling">Дата демонтажа</label>
            @Html.EditorFor(model => model.DateDismantling)
            @Html.ValidationMessageFor(model => model.DateDismantling)
        </div>
    </div>
    <div class="form-inline">

        <div class="form-group">
            <label for="CommentOwner">Подсветка</label>
            @Html.DropDownListFor(a => a.Backlight, new SelectList(new[] { "", "Есть", "Нет" }))
            @Html.ValidationMessageFor(model => model.Backlight)
        </div>

        <div class="form-group">
            <label for="CommentOwner">Комментарий</label>
            @Html.EditorFor(model => model.CommentOwner)
        </div>

    </div>
    <div class="form-horizontal" style="margin-top: 18px">
        <div class="form-group">
            <label for="ConstructionSquare">Площадь конструкции</label>
            <input id="ConstructionSquare" readonly name="ConstructionSquare"  style="background-color: lightgray" type="text" value="">

        </div>
        <div class="form-group">
            <label for="CountSizes">Количество сторон</label>
            @Html.DropDownList("CountSizes", new SelectList(new[] { "", "1", "2", "3", "4", "5", "6", "7", "8"},Model.Sides.Count.ToString()),new {onchange="SetCountSize()"})
            <span class="field-validation-validr" data-valmsg-for="CountSizes" data-valmsg-replace="true">
            </span>
        </div>
    </div>
    <div id="InsertSide"></div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Изменить" class="btn btn-default" />
        </div>
    </div>

}


