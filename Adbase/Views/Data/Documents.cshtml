@using Newtonsoft.Json
@using Sciencecom.Models
@model  Sciencecom.Models.AdvertisingStructure

@{
    ViewBag.Title = "Просмотр документов";
        Layout = "~/Views/Shared/_Layout.cshtml";


        //Собственник конструкциии
        var owners = new SciencecomEntities().Owners.ToList();

        //Вид
        var ListTypeAdvertising = new SciencecomEntities().TypeOfAdvertisingStructures.ToList();
     
        //ListTypeAdvertising.Insert(0,null);

        var ViewBids = new SciencecomEntities().ViewBids.OrderBy(a => a.OrderBy).ToList();


        //Элемент улично-дорожной сети
        var ListTypeElementOfTheRoadNetworkName = new SciencecomEntities().TheElementOfTheRoadNetworks.Select(a => new { id = a.id, Value = a.TheElementOfTheRoadNetworkName }).ToList();

        //Статус
        var Status = new SciencecomEntities().Status.OrderBy(x => x.OrderByStatus).Select(a => new { id = a.id, Value = a.NameStatus }).ToList();
        Status.Insert(0, null);

        //Населенный пункт выпадающий список
        var Locality = new SciencecomEntities().Localities.ToList();

        //Направление стороны
        var DirectionSide = new SciencecomEntities().DirectionSides.OrderBy(x => x.OrderBY).ToList();
        //Индификация поверхности
        var IdentificationSide = new SciencecomEntities().Identifications.ToList();
        //IdentificationSide.Insert(0, null);
        //Идентификационный номер
        var PropertyLocation = new SciencecomEntities().PropertyLocations.ToList();

}
<script type="text/javascript">
    var i = 0;

    var StartCountForSurface ;
    var EndCountForSurface = 0;
    var isGreateAdvertisingDesign = false;
    var ArrayOfSides = @Html.Raw(JsonConvert.SerializeObject(Model.Sides.Select(a=>new {a.DirectionSide_id,length= a.Surfaces.Count,a.Identification_id}), Formatting.Indented, new JsonSerializerSettings
    {
       ReferenceLoopHandling = ReferenceLoopHandling.Ignore
    }));




    $(document).ready(function() {

      
        //накручивание данных в поля
        window.onload = SetCountSize();
        $("[identificationfordirectionside]").each(function(indx, element) {
            $(element)[0].value =ArrayOfSides[indx].DirectionSide_id;

        });
        $("[identificationforcountside]").each(function(indx, element) {
            $(element)[0].value = ArrayOfSides[indx].length;

            AddSurface(indx+1);
        });

        //выпадающий список на согласование
        $("[name=OnAgreement]").change(function() {
            var selectIndex = $("[name=OnAgreement] option:selected").val();

            if (selectIndex == "true") {
                $("#ContractHide").css("display", "block");
            }
            if (selectIndex == "false") {
                $("#ContractHide").css("display", "none");
            }

        });

    });

    // подсчет суммы площадей
    function CalculationAS() {

        var Summ=0;
        $("[selectforspace]").each(function(indx, element) {
            if ($(element).val() != "") {
                Summ += parseInt($(element).val());
            }
        });
        $("#ConstructionSquare").val(Summ);
    }

    //кол-во сторон
    function SetCountSize() {
        EndCountForSurface = 0;
        var CountSizes = $('#CountSizes').val();
        $("#CountSize").val(CountSizes);
        if (CountSizes != "") {
            $("[code]").each(function (indx, element) {
                element.remove();
            });

            for (var i = 1; i <= CountSizes; i++) {

                $("#InsertSide").before("<div code class=\"form-horizontal\" >" +
                    "<div class=\"form-group\" >" +
                    "<h3 class=\"control-label col-md-2\" for=\"\" style=\"margin-left: 55px\">Сторона  " + i + " </h3>" +
                    "</div>" +
                    "<div class=\"form-group\">" +
                    "<div class=\"col-md-10\">" +
                    "<b>Количество поверхностей</b>" +
                    " <select class=\"text-box single-line\" id=\"AddButton" + i + "\" onchange=EditSurface(" + i + ") disabled name=\"CountSurfuce" + i + "\" IdentificationForCountSide=\"\" type=\"text\" data-val=\"true\" data-val-required=\"Укажите кол-во сторон\">" +
                    "<option></option>" +
                    "<option>1</option>" +
                    "<option>2</option>" +
                    "<option>3</option>" +
                    "<option>4</option>" +
                    "<option>5</option>" +
                    "<option>6</option>" +
                    "<option>7</option>" +
                    "<option>8</option>" +
                    "</select> &nbsp;&nbsp;&nbsp; <b>Направление стороны</b>" + '@Ajax.JavaScriptStringEncode(Html.DropDownList("DirectionSide", new SelectList(DirectionSide, "id", "NameOfDirectionSide"), "", new { data_val_required = "Выберете", data_val = "true", IdentificationForDirectionSide = "", disabled = "" }).ToHtmlString().Replace("\"", " "))' +
                    "</div>" +
                    "</div> <div style=\"margin-left: -15px;display: none\" id=\"" + i + "HiddenIdentification\"> &nbsp;&nbsp;&nbsp;<b>Идентификация поверхностей</b>" + '@Ajax.JavaScriptStringEncode(Html.DropDownList("IdentificationSurface", new SelectList(IdentificationSide, "id", "IdentificationName"), "", new { data_val_required = "Выберете", data_val = "true", IdentificationForIdentificationSurface = "", disabled = "" }).ToHtmlString().Replace("\"", " ")) </div>' +
                    "<div  id=\"InsertPartial" + i + "\"></div>" +
                    "</div>");

                $("#SizeOfCount").val(CountSizes);

            }
        }
 
        $('[IdentificationForDirectionSide]').each(function (indx, element) {

            $(element).rules('add', {
                required: true
            });
        }
        );

       
        $('[IdentificationForCountSide]').each(function (indx, element) {

            $(element).rules('add', {
                required: true
            });
        }
        );


    }

    function SetValidate(i) {

        var count = $("#AddButton" + i + "").val();
        StartCountForSurface = EndCountForSurface;
        EndCountForSurface = parseInt(count) + parseInt(EndCountForSurface);

        if (count == 1) {
            $("#" + i + "HiddenIdentification").hide();
        } else {
            $("#" + i + "HiddenIdentification").show();
            //валидация
            $('[name="IdentificationSurface"]').each(function (indx, element) {
                $(element)[0].value =ArrayOfSides[indx].Identification_id;
                $(element).attr("name", "[" + indx + "].IdentificationForIdentificationSurface");
            });
            
            $('[IdentificationForIdentificationSurface]').each(function (indx, element) {

                $(element).rules('add', {
                    required: true
                });
            });

        }
        $("[side=" + i + "]").remove();
    }

    //Добавить поверхность+
    function AddSurface(i) {
        SetValidate(i);

        $.ajax('@Url.Action("EditSurface", "Data")', { async: true, data: { side: i, StartCountForSurface: StartCountForSurface, EndCountForSurface: EndCountForSurface } })
            .success(function(e) {
                
                $("#InsertPartial" + i + "").before(e);
                CalculationAS();
                $('[data-val-number]').each(function(indx, element) {
                    $(element).attr('readonly',"");
                });
            }).error(function(e) {
                alert("ошибка кукареку");
            });
    }
   


    //выщитывание площади для каждой поверхности
    function CalculationOfTheArea(j) {

        var Height = $('[name="[' + j + '].Height"]').val();
        var Width = $('[name="[' + j + '].Width"]').val();

        if (Height != "" && Width != "") {

            var Sum = Height * Width;

            $('[name="[' + j + '].Space"]').val(Sum);
            CalculationAS();
        }

    }


</script>
<h2>Данные о конструкции</h2>
@using (Html.BeginForm("EditAdvertisingDesign", "Data", FormMethod.Post, new { enctype = "multipart/form-data", id = "test1" }))
{

    <h3> 1. Общие данные о рекламной конструкции</h3>
    @Html.AntiForgeryToken()
    <div class="form-inline" style="margin-bottom: -10px">
        <hr />

        <input type="hidden" id="CountSize" id="SizeOfCount" name="CountSize" value="">
        @Html.ValidationSummary(true)
        @Html.ValidationMessage("Error")

        <div class="form-group">
            <label for="Owner">Собственник </label>
            @Html.DropDownListFor(a => a.Owner_Id, new SelectList(owners, "id", "Name"), "", new { disabled = "" })
           
        </div>

        <div class="form-group">
            <label for="Locality">Вид</label>
            @Html.DropDownListFor(a => a.Code, new SelectList(ListTypeAdvertising, "Code", "Name"), null, new { disabled = "" })
          
        </div>

        <div class="form-group">
            <label for="Status">Статус</label>
            @Html.DropDownListFor(a => a.Status_Id, new SelectList(Status, "id", "Value"), null, new { disabled ="" })
           
        </div>

        <div class="form-group">
            <label for="UniqueNumber">Идентификационный номер</label>
            @Html.EditorFor(model => model.UniqueNumber, new { htmlAttributes = new { @readonly = "" } })
  
        </div>
        <br>

    </div>
    <div class="form-horizontal">
        <div class="form-group">
            <label for="Owner">конструкции </label>
        </div>
    </div>
    <div class="form-inline">
        <div class="form-group">
            <label for="PropertyLocation_id">Форма собственности места размещения </label>
            @Html.DropDownListFor(a => a.PropertyLocation_id, new SelectList(PropertyLocation, "id", "NamePropertyLocation"), "", new { disabled ="" })
        
        </div>

        <div class="form-group">
            <label for="Owner">Собственник места размещения</label>
            @Html.EditorFor(model => model.OwnerPlacements, new { htmlAttributes = new { @readonly = "" } })
   
        </div>

    </div>
    <h3> 2.Данные о месте расположения рекламной конструкции</h3>

    <div class="form-inline">
        <hr />
        <div class="form-group" style="margin-left: -15px">
            <label for="Locality">Нас. пункт</label>
            @Html.DropDownListFor(a => a.Locality_id, new SelectList(Locality, "id", "NameLocality"), null, new { disabled ="" })
           
        </div>

        <div class="form-group">
            <label for="Street1">Улица</label>
            @Html.EditorFor(model => model.Street1, new { htmlAttributes = new { @readonly = "" } })

        </div>

        <div class="form-group">
            <label for="House1">Дом</label>
            @Html.EditorFor(model => model.House1, new { htmlAttributes = new { @readonly = "" } })
           
        </div>


    </div>


    <div class="form-inline">
        <div class="form-group">
            <label for="Street2">Ближайшая улица по ходу движения</label>
            @Html.EditorFor(model => model.Street2, new { htmlAttributes = new { @readonly = "" } })
           
        </div>

        <div class="form-group">
            <label for="FromStreet">Со стороны улицы</label>
            @Html.EditorFor(model => model.FromStreet, new { htmlAttributes = new { @readonly = "" } })
        
        </div>
    </div>

    <div class="form-inline" style="margin-top: 20px">

        <div class="form-group">
            <label for="TheElementOfTheRoadNetwork">Элемент улично-дорожной сети</label>
            @Html.DropDownListFor(a => a.TheElementOfTheRoadNetwork_id, new SelectList(ListTypeElementOfTheRoadNetworkName, "id", "Value"), null, new { disabled = "" })
           
        </div>

    </div>
  

    <h3> 3.Разрешительная документация</h3>
    <div class="form-horizontal">
        <hr />
        <div class="form-group">

            <label for="ViewBad_Id">Вид заявки</label>
            @Html.DropDownListFor(model => model.ViewBad_Id, new SelectList(ViewBids, "id", "Name"), null, new { disabled = "" })
          


            <label for="DateOfReceiptOfTheApplication">Дата подачи заявки</label>
            @Html.EditorFor(model => model.DateOfReceiptOfTheApplication, new { htmlAttributes = new { @readonly = "" } })
           

        </div>
        <div class="form-group" style="margin-bottom: 5px">

            <label for="C_PassportAdvertising">№ паспорта рекламы</label>
            @Html.EditorFor(model => model.C_PassportAdvertising, new { htmlAttributes = new { @readonly = "" } })
         


            <label for="DateOfTakenPassport">Дата выдачи паспорта</label>
            @Html.EditorFor(model => model.DateOfTakenPassport, new { htmlAttributes = new { @readonly = "" } })
            

        </div>

        <div class="form-group" style="margin-bottom: 5px">
            <label for="StartDate">разреш с</label>
            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @readonly = "" } })
            

            <label for="EndDate">разреш по</label>
            @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @readonly = "" } })
            
        </div>

    </div>



    <div class="form-horizontal">

        <div class="form-group" style="margin-bottom: 5px">
            <label for="C_ContractFinancialManagement">№ договора с финансовым управлением</label>
            @Html.EditorFor(model => model.C_ContractFinancialManagement, new { htmlAttributes = new { @readonly = "" } })
          

            <label for="TheDateOfTheContract">Дата договора</label>
            @Html.EditorFor(model => model.TheDateOfTheContract, new { htmlAttributes = new { @readonly = "" } })
            

        </div>


    </div>

    <h3> 4.Описание рекламной конструкции</h3>

    <div class="form-inline">
        <hr />
        <div class="form-group">
            <label for="PlannedInstallationDate">Планируемая дата установки</label>
            @Html.EditorFor(model => model.PlannedInstallationDate, new { htmlAttributes = new { @readonly = "" } })
        
        </div>

        <div class="form-group">
            <label for="DateOfActualInstallation">Дата фактической установки</label>
            @Html.EditorFor(model => model.DateOfActualInstallation, new { htmlAttributes = new { @readonly = "" } })
           
        </div>



    </div>
    <div class="form-horizontal">
        <div class="form-group">
            <label for="DateDismantling">Дата демонтажа</label>
            @Html.EditorFor(model => model.DateDismantling, new { htmlAttributes = new { @readonly = "" } })
        
        </div>
    </div>
    <div class="form-inline">

        <div class="form-group">
            <label for="CommentOwner">Подсветка</label>
            @Html.DropDownListFor(a => a.Backlight, new SelectList(new[] { "", "Есть", "Нет" }), null, new { disabled = "" })
            
        </div>

        <div class="form-group">
            <label for="CommentOwner">Комментарий</label>
            @Html.EditorFor(model => model.CommentOwner, new { htmlAttributes = new { @readonly = "" } })
        </div>

    </div>
    <div class="form-horizontal" style="margin-top: 18px">
        <div class="form-group">
            <label for="ConstructionSquare">Площадь конструкции</label>
            <input id="ConstructionSquare" readonly name="ConstructionSquare" style="background-color: lightgray" type="text" value="">

        </div>
        <div class="form-group">
            <label for="CountSizes">Количество сторон</label>
            @Html.DropDownList("CountSizes", new SelectList(new[] { "", "1", "2", "3", "4", "5", "6", "7", "8" }, Model.Sides.Count.ToString()), new { onchange = "SetCountSize()", disabled = "" })
            <span class="field-validation-validr" data-valmsg-for="CountSizes" data-valmsg-replace="true">
            </span>
        </div>
    </div>
    <div id="InsertSide"></div>



}


@if (ViewBag.Type == "BB")
{ 
    <div id="image">
    @if (ViewBag.Scan1Sides)
    {
        <p>
            <h3>@Html.Raw("Скан 1 страницы договора с финанаосвым управлением ")</h3><br />
        </p>
        string image = "/Images/Scan1SidesWithFinancialManagement/" + ViewBag.Id +
                             "FinancialManagement.jpg";
        <p>
          <a href=@image ><img src=@image height="500"></a><br />
        </p>
    }
    else
    {
        @Html.Raw("Скан 1 страницы договора с финанаосвым управлением отсутствует.")<br />
    }
    @if (ViewBag.ScanPassport_1)
    {
        <p>
            <h3>@Html.Raw("Скан паспорта (стор 1) ")</h3><br />
        </p>
        string image = "/Images/ScanPassport_1Sides/" + ViewBag.Id + "passport.jpg";
        <p>
           <a href=@image ><img src=@image height = "500"></a><br />
        </p>
    }
    else
    {
        @Html.Raw("Скан паспорта (стор 1) отсутствует")<br />
    }

    @if (ViewBag.ScanPassport_2)
    {
        <p>
            <h3>@Html.Raw("Скан паспорта (стор 2) ")</h3><br />
        </p>
        string image = "/Images/ScanPassport_2Sides/" + ViewBag.Id + "ScanPassport_2Sides.jpg"; ;
        <p>
           <a href=@image ><img src=@image height="500"></a><br />
        </p>
    }
    else
    {
        @Html.Raw("Скан паспорта (стор 2) отсутствует.")<br />
    }
    </div>
}


