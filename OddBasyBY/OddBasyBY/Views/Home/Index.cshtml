@{
    ViewBag.Title = "Home Page";
 
}
<script type="text/javascript">
    ymaps.ready(init);
    var myMap;
    var myPlacemark;
    var Arr = [[]];
    var counterArr = 0;
    var handlerRoute;
    var currentRoute;
    var firstPointRoute;
    var endPointRoute;
    var position;
    var identifierForDelete = 0;
    var increment = 1;
    var tempData;
    var tempDataFor3 = 5;
    var objects ;
    function init() {

        myMap = new ymaps.Map("map", {
            center: [53.9172, 27.5601],
            zoom: 11,
            controls: []
        });

        myMap.behaviors.disable(["dblClickZoom"]);



    }

    function SetRoute(Arr) {

        if (currentRoute != undefined) {
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());

        }
        ymaps.route([
                Arr[0],
                Arr[1]
        ],
            {
                mapStateAutoApply: true,
                removeViaPoints: true

            }
        ).then(
            function (route) {
                route.events.add('dragend', function (e) {

                    Arr[0] = [route.requestPoints[0][0].toString().substr(0, 7), route.requestPoints[0][1].toString().substr(0, 7)];
                    Arr[1] = [route.requestPoints[1][0].toString().substr(0, 7), route.requestPoints[1][1].toString().substr(0, 7)];
                });


                route.editor.start({
                    editWayPoints: true
                });

                var points = route.getWayPoints();
                points.get(0).properties.set("iconContent", "Начало улицы");
                points.get(0).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>");
                points.get(0).options.set('preset', 'islands#darkGreenStretchyIcon');


                points.get(1).properties.set("iconContent", "Конец улицы");
                points.get(1).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>");
                points.get(1).options.set("preset", "islands#darkGreenStretchyIcon");
                route.editor.events.add("routeupdate", function () {
                    $("#breadthS").val(route.requestPoints[0][0].toString().substr(0, 7));
                    $("#lengthS").val(route.requestPoints[0][1].toString().substr(0, 7));
                    $("#breadthE").val(route.requestPoints[1][0].toString().substr(0, 7));
                    $("#lengthE").val(route.requestPoints[1][1].toString().substr(0, 7));
                });

                route.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9
                });
                currentRoute = route;

                myMap.geoObjects.add(route);
                //удаление лишних обьектов
                myMap.geoObjects.remove(myPlacemark);
                myMap.geoObjects.remove(firstPointRoute);
                myMap.geoObjects.remove(endPointRoute);

                identifierForDelete = 0;
                //заполнение переменных
                $("#breadthS").val(Arr[0][0]);
                $("#lengthS").val(Arr[0][1]);
                $("#breadthE").val(Arr[1][0]);
                $("#lengthE").val(Arr[1][1]);
            },
            function (error) {
                alert("Возникла ошибка: " + error.message);
            });


    }

    //поиск
    function search() {

        if (myPlacemark != undefined) {

            myMap.geoObjects.remove(myPlacemark);
        }
        position = $("#city").val().toString() + " " + $("#street").val().toString();

        var myGeocoder = ymaps.geocode(position);

        myGeocoder.then(
            function (res) {

                myPlacemark = new ymaps.GeoObject({
                    geometry: {
                        type: "Point", // тип геометрии - точка
                        coordinates: [res.geoObjects.get(0).geometry.getCoordinates()[0], res.geoObjects.get(0).geometry.getCoordinates()[1]] // координаты точки
                    }
                },
                { draggable: true });
                myMap.geoObjects.add(myPlacemark);
                identifierForDelete++;
                myMap.setCenter([res.geoObjects.get(0).geometry.getCoordinates()[0], res.geoObjects.get(0).geometry.getCoordinates()[1]], 14);
            });

    }

    function Set() {

        if ($("#breadthS").val() != "" && $("#lengthS").val() != "" && $("#breadthE").val() && $("#lengthE").val()) {
            Arr = [[]];

            Arr[0] = [parseFloat($("#breadthS").val()), parseFloat($("#lengthS").val())];
            Arr[1] = [parseFloat($("#breadthE").val()), parseFloat($("#lengthE").val())];

            SetRoute(Arr);
        }
    }
    //удаление начальной точки
    function setHandlerS() {
        if (identifierForDelete == 0) {
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());
            endPointRoute = new ymaps.GeoObject({
                geometry: {
                    type: "Point", // тип геометрии - точка
                    coordinates: [Arr[1][0], Arr[1][1]] // координаты точки
                },
                properties: {
                    iconContent: "Конец улицы",
                    balloonContentHeader: "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>",
                    balloonContent: "[" + Arr[1][0] + "," + Arr[1][1] + "]"
                }
            },
            { draggable: true, preset: "islands#darkGreenStretchyIcon" });


            endPointRoute.events.add("dragend", function (e) {

                var coords = endPointRoute.geometry.getCoordinates();
                Arr[1] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                //изменение координат при пертягивание метки
                var object = e.get('target');
                object.properties.set("balloonContent", "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]");

            });
            myMap.geoObjects.add(endPointRoute);
            myMap.events.add('dblclick', handlerRoute);
            identifierForDelete = 1;

        } else {
            myMap.geoObjects.remove(firstPointRoute);
            identifierForDelete = 0;
            counterArr = 0;
            Arr = [[]];


        }
        counterArr = 0;
    }
    //удаление конченой точки
    function setHandlerE() {

        if (identifierForDelete == 0) {
            myMap.geoObjects.remove(endPointRoute);
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());
            firstPointRoute.geometry.setCoordinates([Arr[0][0], Arr[0][1]]);
            myMap.geoObjects.add(firstPointRoute);
            myMap.events.add('dblclick', handlerRoute);
            counterArr = 1;
            identifierForDelete = 1;

        } else {
            myMap.geoObjects.remove(endPointRoute);
            identifierForDelete = 0;
            counterArr = 0;
            Arr = [[]];


        }

    }
    //задать координаты
    function SetCoords() {
        if (currentRoute != undefined) {
            $("#blockStreetCoord").css("display", "inline");
            myMap.geoObjects.add(currentRoute);
            currentRoute.editor.start({ editWayPoints: true });

            $("#blockStreetCoord").parent().prev().children("input").each(function (indx, element) {
                $(element).removeAttr("readonly");

            });

            $("#blockStreetCoord").parent().prev().prev().prev().children("input").each(function (indx, element) {
                $(element).removeAttr("readonly");
            });

        }
        else {
            handlerRoute = function (e) {


                var coords = e.get('coords');
                if (counterArr < 2) {
                    Arr[counterArr] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];

                }
                if (counterArr == 0) {
                    firstPointRoute = new ymaps.GeoObject({
                        geometry: {
                            type: "Point", // тип геометрии - точка
                            coordinates: [Arr[0][0], Arr[0][1]] // координаты точки
                        },
                        properties: {
                            iconContent: "Начало улицы",
                            balloonContentHeader: "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>",
                            balloonContent: "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]"
                        }
                    },
                    { draggable: true, preset: "islands#darkGreenStretchyIcon" });
                    firstPointRoute.events.add("dragend", function (e) {

                        var coords = firstPointRoute.geometry.getCoordinates();
                        Arr[0] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                        //изменение координат при пертягивание метки
                        var object = e.get('target');
                        object.properties.set("balloonContent", "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]");

                    });

                    myMap.geoObjects.add(firstPointRoute);
                    identifierForDelete++;
                }
                counterArr++;

                if (Arr.length == 2) {

                    SetRoute(Arr);
                    //задать несколько маршрутов
                    //Arr = [];
                    //counterArr = 0;
                    myMap.events.remove('dblclick', handlerRoute);

                }
            }

            myMap.events.add('dblclick', handlerRoute);

        }
    }
    function SetCoordsForSegment() {
        if (currentRoute == undefined) {
            alert("Задайте улицу или возможно нажмите кнопку сохранить в этом пункте");
        } else {
            
            var handlerSegment = function (e) {

                var coords = e.get('coords');

                ymaps.route([
                         tempData,
                       [coords[0].toPrecision(6), coords[1].toPrecision(6)]
                ],
                    {
                        mapStateAutoApply: true,
                        removeViaPoints: true
                    }
                ).then(
                    function (route) {
                        route.getPaths().options.set({

                            //можно выставить настройки графики маршруту
                            strokeColor: '#FF0000',
                            opacity: 0.9,
                            strokeWidth: 4
                        });


                        if (increment >= 2 && increment <= 4) {

                            $("#segment" + (increment - 1)).after('<div id="segment' + increment + '">' +
                                                                    '<b><u>Координаты участка ' + increment + '</u></b>' +
                                                                    '<div>Начальнаты начала</div>' +
                                                                    '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + increment + '" name="Segment.BreadthS" readonly="" type="text" value="">' +
                                                                        '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + increment + '" name="Segment.LengthS" readonly="" type="text" value="">' +
                                                                    '</div><div>Координаты конца</div><div>' +
                                                                        '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + increment + '" name="Segment.BreadthE" readonly="" type="text" value="">' +
                                                                        '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + increment + '" name="Segment.LengthE" readonly="" type="text" value=""></div><div>' +

                                                                 '</div>');
                        }

                        if (increment > 4) {
                            if (increment == 5) {
                                $("#segment4+div").remove();
                                $("#interData").after( '<div >' +
                                                           '<button type="button" onclick="SetCoordsForSegment()" class="btn btn-success ">Задать/Изменить координаты</button>'+
                                                           '<button type="button" id="" class="btn btn-warning">Сохранить</button>' +
                                                       '</div>');
                            } 
                            if (tempDataFor3 == increment) {
                                $('[action="/Home/SaveSuccess"]').append('<div style="margin-top: 10px"><div id="segment' + increment + '" style="width: 30.2%;float: left;height: 115px"></div><div id="segment' + (increment + 1) + '" style="width:29%;float: left;height: 115px"></div><div id="segment' + (increment + 2) + '" style="width: 39.8%;float: left;height: 115px"></div></div><div style="clear:both"></div>');
                                tempDataFor3 = tempDataFor3 + 3;
                            }
                            $("#segment" + increment).html(               '<b><u>Координаты участка ' + increment + '</u></b>' +
                                                                           '<div>Начальнаты начала</div>' +
                                                                           '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + increment + '" name="Segment.BreadthS" readonly="" type="text" value="">' +
                                                                               '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + increment + '" name="Segment.LengthS" readonly="" type="text" value="">' +
                                                                           '</div><div>Координаты конца</div>' +
                                                                           '<div>' +
                                                                               '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + increment + '" name="Segment.BreadthE" readonly="" type="text" value="">' +
                                                                               '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + increment + '" name="Segment.LengthE" readonly="" type="text" value=""></div><div>' +

                                                                           '</div></div>'
                                                                               
                );
                        }
                        $("#breadthSegS" + increment).val(tempData[0]);
                        $("#lengthSegS" + increment).val(tempData[1]);
                        $("#breadthSegE" + increment).val(coords[0].toPrecision(6));
                        $("#lengthSegE" + increment).val(coords[1].toPrecision(6));
                        $("#CountSides").val(increment);
                        var segment = new ymaps.GeoObject({
                            geometry: {
                                type: "Point", // тип геометрии - точка
                                coordinates: [coords[0].toPrecision(6), coords[1].toPrecision(6)]// координаты точки

                            },
                            properties: {
                                iconContent: increment++,
                                balloonContentHeader: "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>",
                                balloonContent: "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]"
                            }
                        },
                        {
                            preset: "islands#blueCircleIcon"
                            //draggable:true
                        });
                        myMap.geoObjects.add(route.getPaths());
                        myMap.geoObjects.add(segment);
                        //objects = ymaps.geoQuery([segment]);
                       
                        //segment.events.add('drag', function () {
                        //    console.log(currentRoute.editor.getSegments());
                        //var objectsInsideCircle = objects.searchInside(currentRoute.getPaths().get(0));
                       
                        //    objectsInsideCircle.setOptions('preset', 'twirl#blueIcon');
                        //    //Оставшиеся объекты - синими.
                        //    objects.remove(objectsInsideCircle).setOptions('preset', 'islands#redIcon');
                        //});

                        tempData = [coords[0].toPrecision(6), coords[1].toPrecision(6)];

                    });
            }
            currentRoute.getPaths().events.add('click', handlerSegment);

        }
    }
    //задание координат
    $(document).ready(function () {
        $("#breadthS, #lengthS, #breadthE, #lengthE").change(function () {
            Set();
        });

        //заблокировать наименовае улицы
        $("#blockStreet").click(function () {
            $(this).parent().prev().children("input").each(function (indx, element) {
                $(element).attr("readonly", "");
            });
            $(this).css("display", "none");

        });
        //заблокировать поля  улицы и убрать координаты
        $("#blockStreetCoord").click(function () {
            //currentRoute.getPaths().get(0).state.events.add('change', function (e) {
            //    console.log(e.get('target').getAll());
            //});
            objects = ymaps.geoQuery([]);
            //делает readOnly  инпуты
            if (currentRoute != undefined && identifierForDelete != 1) {
                $(this).parent().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });

                $(this).parent().prev().prev().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });

                $(this).css("display", "none");
                currentRoute.editor.start({ editWayPoints: false });
                if (currentRoute != undefined) {
                    myMap.geoObjects.remove(currentRoute);
                }
                currentRoute.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9,
                    strokeWidth: 4
                });

                //console.log(currentRoute.getPaths().get(0).state.get('hover'));
                tempData = Arr[0];
                currentRoute.getPaths().get(0).balloon.destroy();
                myMap.geoObjects.add(currentRoute.getPaths());

            } else {
                alert("Задайте сначала маршрут");
            }
        });

    });
</script>

<style>
    /*правит шрифт бутсрапа*/
    label {
        font-weight: normal;
    }
    /*отступы*/
    .indentForTextBox {
        margin-right: 60px;
    }

    .btn {
        width: 285px;
    }
</style>
<h2 style="text-align: center">Карточка улицы</h2>

@using (Html.BeginForm("SaveSuccess", "Home", null, FormMethod.Post, new { style = "height: 744px" }))
{
    <div class="form-inline">
        <div class="form-group col-lg-7 col-md-7 col-sm-7 col-xs-7">
            <div id="map" style="height: 744px;"></div>
        </div>

        <div class="form-group col-lg-5 col-md-5 col-sm-5 col-xs-5">
            <b><u>1.Наименование улицы</u></b>
            <div>
                @Html.Hidden("City.id",(int) ViewBag.City.id)
                @Html.Label("Выбирите город", new {@for = "City.Name"}) @Html.TextBox("City.Name", (string) ViewBag.City.Name, new {id = "city"})
                @Html.Label("Выбирите улицу", new {@for = "Segment.Name"}) @Html.TextBox("Segment.Name", null, new {id = "street"})
            </div>
            <div>
                <button type="button" class="btn btn-success " onclick="search()">Показать на карте</button>
                <button type="button" id="blockStreet" class="btn btn-warning">Сохранить</button>
            </div>
            <b><u>2.Координаты улицы</u></b>
            <div>Начальнаты начала</div>
            <div>
                @Html.Label("Широта", new {@for = "Street.BreadthS" }) @Html.TextBox("Street.BreadthS", null, new {id = "breadthS"})
                @Html.Label("Долгота", new {@for = "Street.LengthS" }) @Html.TextBox("Street.LengthS", null, new {id = "lengthS"})
            </div>
            <div>Координаты конца</div>
            <div>
                @Html.Label("Широта", new {@for = "Street.BreadthE" }) @Html.TextBox("Street.BreadthE", null, new {id = "breadthE"})
                @Html.Label("Долгота", new {@for = "Street.LengthE" }) @Html.TextBox("Street.LengthE", null, new {id = "lengthE"})
            </div>
            <div>
                <button type="button" onclick="SetCoords()" class="btn btn-success ">Задать/Изменить координаты</button>
                <button type="button" id="blockStreetCoord" class="btn btn-warning">Сохранить</button>
            </div>
            <b><u>3.Количество и координаты участков улицы</u></b>
            <div>
                @Html.Label("Количество участков", new {@for = "CountSides", style = "margin-right: 20px"}) @Html.TextBox(" ", null, new {id = "CountSides", style = "width: 40px", @readonly = ""})

            </div>
            <div id="segment1">
                <b><u>Координаты участка 1</u></b>
                <div>Начальнаты начала</div>
                <div>
                    @Html.Label("Широта", new {@for = "Segment.BreadthS" }) @Html.TextBox("Segment.BreadthS", null, new {id = "breadthSegS1", @readonly = ""})
                    @Html.Label("Долгота", new {@for = "Segment.LengthS" }) @Html.TextBox("Segment.LengthS", null, new {id = "lengthSegS1", @readonly = ""})
                </div>
                <div>Координаты конца</div>
                <div>
                    @Html.Label("Широта", new {@for = "Segment.BreadthE" }) @Html.TextBox("Segment.BreadthE", null, new {id = "breadthSegE1", @readonly = ""})
                    @Html.Label("Долгота", new {@for = "Segment.LengthE" }) @Html.TextBox("Segment.LengthE", null, new {id = "lengthSegE1", @readonly = ""})
                </div>
            </div>

            <div>
                <button type="button" onclick="SetCoordsForSegment()" class="btn btn-success ">Задать/Изменить координаты</button>
                <button id="" class="btn btn-warning">Сохранить</button>
            </div>

        </div>

    </div>

}

<div>
    <div class="">
        <b><u>4.Ввод данных</u></b>
    </div>
    <div>
        <button class="btn btn-default">Ввести спецификацию разметки</button>
    </div>
    <div>
        <b><u>Участок 1</u></b>
    </div>

    <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
        <button type="button" class="btn btn-default">Загрузить Дислокацию ТСОДД</button>
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
        <button type="button" class="btn btn-default">Ввести данные о дорожных знаках</button>
    </div>
    <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-4">
        <button type="button" class="btn btn-default">
            Ввести данные о дорожных ограждениях
        </button>
    </div>
</div>